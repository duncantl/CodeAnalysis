<!-- 
  Count the number left to do.
  ll =readLines("Todo"); length(grep("^\\+", split(ll, cumsum(grepl("^#", ll)))[[1]]))
-->

+ getGlobals() doesn't detect local variable in if() could be a global
  + same with  x < 0 || (w <- any(is.na(x))) when x is < 0 and second term not evaluated.

+ Find unused parameters and local variables 
   + Check if the new findAssignsTo() helps this.
   + see findUnusedParams
   + can we adapt getGlobals() to identify local variable creation and then if it is used.
   	  + add a field to getGlobals() output which indicates if local variable was used - either as
             return value or in RHS of another expression.

+ programmatically determine if a function returns a function
  + see returnsFunction() in functionsReturningFunctions.R
  + fix to deal with processing assignments in subfunctions and not the function itself.
     + need to detect updates/replacement function assignments, e.g. attr(f, "foo") = x and f$foo =
       x and f[["foo"]] = x and chains.

+ [check] findCallsTo - extend to identify do.call and *apply calls. 
   + consolidate with isCallTo()
       + that mixes rstatic and language objects. Add to language part but should update
	      rstatic part also.
   + [check] Handle pkg::foo and pkg:::foo cases for indirect, e.g. do.call(base::rbind)
   + √ when processing a call, check if isCallTo(x, OneOfTheseFunctions)
       and if so, is the FUN argument (or corresponding argument) a call to the
  	   target functions.

+ findFunctionDefs()/getFunctionDefs() doesn't handle  name = name2 = function() ...
   + √ getFunctionDefs() gets it right for tests/chainedAssigns.
   + findFunctionDefs() returns list.
   + Old
     + only captures name and not name2
     + e.g. RDCOMEvents/eventServer.S
     + shouldn't need recursive = TRUE to find name in name = name2 = function() ..
     + works now, but not with recursive = TRUE

+ Re. above - should we get rid of findFunctionDefs()
    + [NO] Does getFunctionDefs() know about Vectorize/vectorize
	+ √ getFunctionDefs() knows about (top-level) if(FALSE)
	   + see `getFunctionDefs("tests/chainedAssigns.R")`

+ getFunctionDefs() - have it find functions in setMethod()
   + √ already works with recursive = TRUE.
   + perhaps put better name on "these" (what ?) methods and generics.
     + need state, or ability to go back up tree.

+ circular references in parameters 
   + find parameters with default values that refer to local variables
      and check if the parameter is used before those local variables are created.
   + See explorations/findSelfRef.R.



+ fix callGraph(fun) and the name used is obj. (meaning what??).
   + obj is the name of the first argument.

+ implement findOS()/mkOSWalker for finding code that depends on the platform/OS

+ If a function has a literal externalptr inlined, then getGlobals() fails in lapply(els, fun, w)

+ Fix mkGlobalsLocal() to optionally not add a default value to a parameter
   e.g. not replace Jvar with .Jvar = Jvar

+ Have mkGlobalsLocal() return the entire list, not just the ones that were changed.
   Make this an option.

+ mkGlobalsLocal() not changing references inside return() clause. See rstatic probably.

+ for loop concatenation, rewrite the code.
   We need type information about the elements to be able to initialize the answer vector.

+ [low] code analysis example (unrelated to highlighting, just the example)
  + highlight package getStyleFile() has
  ```
  if (grepl(sprintf("%s$", extension, ignore.case = TRUE),  name))
  ```
  + the ignore.case is in the call to sprintf() and the command
    gives a warning about ignoring an argument to sprintf.
  + The ignore.case should be outside the sprintf() and in the call to grepl()
     + but since sprintf() has ... it is ambiguous, but not really
  + check whether a named argument in a call makes sense in the parent call.


+ [check/robustify] isAssignTo - make it handle complex left hand side.
   + √ Look at the function isComplexAssignTo. Make more robust.
   + See foo in tests/findAssignsTo.R.
   + Uses isAssignTo
     + So currently just checks if the LHS is the symbol. 
	 + add a version of this that handles complex assignments.
   + problem is `x$y <- value ` is a call to `$<-`(x, y) and misses value.  Need to go back up the
     tree.	 
	 + But actually `x$y <-value` is parsed as `<-(x$y, value)`
   + findAssignsTo(findCallsTo, "isEnv") doesn't find the assignment in the if condition.
      + old todo item and findCallsTo code no longer has isEnv
      + but issue is *probably* if( isEnv <- is.environment(x))
      + findAssignsTo2 seems to work.



# Done

+ Fix message from getGlobals
```In procIndirectFunCall(e, funName) :
       cannot currently determine function in empty call to match.call. That uses the context of the call.1
```
   + see base::autoloader
      + findSelfRef.R and running on all packages to reproduce issue.
   + remove this message. It occurs with calls to match.call() and formals() with no
     arguments. There are no variables there - global or local.

+ √ false positive for global variables in R CMD check for textConnection("bob", "w", local = TRUE); bob
  + This is an R issue.
  + √ We can make getGlobals() understand it.

+ removeAfterReturn  should work recursively to process blocks within functions.

+ remove unused parameters - see findUnusedArgs/findUnusedParams. also unusedParams

+ remove unused assignments if we can tell there are no side effects of the RHS.
