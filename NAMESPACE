# Imports
import(igraph)
importFrom(tools, file_ext)
importFrom(stats, na.omit)
importFrom(CodeDepends, getInputs, findWhenUnneeded, readScript, getVariableDepends)
importFrom(methods,
           is, "body<-", new, slot, getClass, getClasses, as)


importFrom(codetools, walkCode, makeCodeWalker, findGlobals)
importFrom(graphics, plot)

# Exports from this package

S3method(plot, R6ClassInherits)

export(findLoopConcat)
export(findUnusedArgs, findUnusedParams, findUnusedAssignments)
export(constInputs)
export(removeAfterReturn)

export(removeConstIf)

export(getGlobals, getGlobalFunctions, getScriptGlobals)
export(missingScriptVars)

export(substituteDefaultValues)
export(mkGlobalsLocal)

export(getDepends)

export(loadCode)

export(getFilesRead, findNSE, S3Assignments, mkClassGraph, findUsedOptions)

export(csvTypeInfo)
exportMethods(csvTypeInfo)

export(findCallsParam)
export(getR6ClassInherits)

#XXXX
#export(checkLoopDepend)

# Adding as Matt and I write the Exploring Code chapter of the case studies book.
export(isCallTo)
export(getArgFromCall)

export(getIfCond, getIfTrue, getIfFalse)

export(pkgSymbolsUsed)

# From the  exploration of the variety_trial_analysis project.
# Some duplicates!
#remove from export
#    export(findFunctionDefs)
# Use getFunctionDefs()
export(getFunctionDefs)
exportMethods(getFunctionDefs)

# Needed??
export(isFunAssign)
export(isIfFalse)


export(getURLs)
export(freeVariables)
export(findReadDataFuns, findWriteDataFuns, findGraphicsDevFuns)
#export(getGraphicsDeviceCalls)
#export(findCallsToFunctions)

export(getInputFiles, getOutputFiles, getGraphicsOutputFiles)

# Wouldn't findCallsTo() be better?
export(getAllCalls)
S3method(getAllCalls, character)
S3method(getAllCalls, expression)

export(getSourceInfo)
S3method(getSourceInfox, character)
S3method(getSourceInfox, expression)

export(callGraph)
exportMethods(callGraph)

export(findCallsTo)
export(findAssignsTo)

S3method(plot, CallGraphEdges)

export(pkgCodeInfo, fileCodeInfo)

export(findLoops, numNestedLoops)

export(isParameter, isLocalVar)

export(all_symbols, getAllSymbols)

export(mkCallWalkerPred)
export(isSymbol, isLiteral)

export(numCalls, getPkgFunctions)

export(insertLang)

export(isSimpleAssignTo, isComplexAssignTo)

export(returnsFunction)


export(getIndirectCallFunList)


export(findLiterals)


export(getCallPaths)

export(toc,dynToc)

